openapi: 3.0.3
info:
  title: Tapis Applications API
  description: The Tapis Applications API provides for management of Tapis applications including permissions.
  version: '1.4.2'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Applications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Applications
    description: Manage Tapis application resources. Create, retrieve, update, etc.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of resources. The application owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
  
      Please note that Tapis also supports a higher level approach to granting access known as *Sharing* that also includes
      certain implicit access to resources during the execution of a Tapis job.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows an application owner to share an application
      with a set of users as well as share publicly with all users in a tenant. Sharing grants users READ access to the
      application and more importantly facilitates allowing others to run a job using the application.

      Please note that sharing an application gives a user certain implicit access to resources in the context of running
      a job. For example, if the application has defined a specific execution system id then while the job is running the
      user who has been granted access to the application via sharing will also have the applications owner's
      authorizations when accessing the system and paths on the system. Note that the application owner's authorizations
      supplement the user's authorizations, they do not replace them.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /apps -----------------------------------------------------
  '/v3/apps/healthcheck':
    get:
      tags:
        - General
      description: Health check. Lightweight non-authenticated check that service is alive.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/apps/readycheck':
    get:
      tags:
        - General
      description: Ready check. Non-authenticated check that service is ready to do work.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service not ready.

  '/v3/apps':
    get:
      tags:
        - Applications
      description: |
        Retrieve list of applications. Use *listType*, *search* and *select* query parameters to limit results. Query
        parameter *listType* allows for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: getApps
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query parameter. For example search=(id.like.MyApp*)~(enabled.eq.true)
          schema:
            type: string
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Applications marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      description: |
        Create an application using a request body. App id+version must be unique within tenant and can be composed of
        alphanumeric characters and the following special characters [-._~]. Id must begin with an alphanumeric character
        and can be no more than 80 characters in length.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create an application.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - sharedAppCtx
          - deleted
          - created
          - updated
      operationId: createAppVersion
      requestBody:
        required: true
        description: A JSON object specifying information for the app to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostApp'
      responses:
        '201':
          description: Application created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/search':
    get:
      tags:
        - Applications
      description: |
        Retrieve details for applications. Use query parameters to specify search conditions.
        For example ?owner.eq=jdoe&enabled.eq=false
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchAppsQueryParameters
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      description: |
        Retrieve details for applications. Use request body to specify SQL-like search conditions.
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchAppsRequestBody
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchApps'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}':
    get:
      tags:
        - Applications
      description: |
        Retrieve latest version of an application. In the result the attribute *sharedAppCtx* indicates if the
        application is available to the user because it has been shared with the user. The value of *sharedAppCtx*
        will be the grantor, the Tapis user who shared the application.
      operationId: getAppLatestVersion
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}':
    get:
      tags:
        - Applications
      description: |
        Retrieve information for an application given the application Id and version.
        In the result the attribute *sharedAppCtx* indicates if the application is available to the user because it has
        been shared with the user. The value of *sharedAppCtx* will be the grantor, the Tapis user who shared the application.
        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization.
      operationId: getApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Applications
      description: |
        Update selected attributes of an existing version of an application.
        Request body may only contain updatable attributes. Application must exist.

        Attributes that may not be updated via PATCH are

          - id
          - owner
          - enabled
          - locked

        Note that the attributes owner, enabled and locked may be modified using other endpoints.
      operationId: patchApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Applications
      description: |
        Update all updatable attributes of an application using a request body identical to POST. Application must exist.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a PUT request to update.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - sharedAppCtx
          - deleted
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - id
          - version
          - owner
          - enabled
          - locked

        Note that the attributes owner, enabled and locked may be modified using other endpoints.
      operationId: putApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/isEnabled':
    get:
      tags:
        - Applications
      description: |
        Check if an application is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/enable':
    post:
      tags:
        - Applications
      description: |
        Mark an application available for use. Applies to all versions.
      operationId: enableApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/disable':
    post:
      tags:
        - Applications
      description: |
        Mark an application unavailable for use. Applies to all versions.
      operationId: disableApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/lock':
    post:
      tags:
        - Applications
      description: |
        Lock a version of an application to prevent updates via PUT or PATCH.
        Requester must be owner of the app or a tenant administrator.
      operationId: lockApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application locked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/unlock':
    post:
      tags:
        - Applications
      description: |
        Unlock a version of an application to allow updates via PUT and PATCH.
        Requester must be owner of the app or a tenant administrator.
      operationId: unlockApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application unlocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/delete':
    post:
      tags:
        - Applications
      description: |
        Mark an application as deleted. Application will not appear in queries unless explicitly requested.
      operationId: deleteApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/undelete':
    post:
      tags:
        - Applications
      description:  |
        Mark an application as not deleted. Application will appear in queries.
      operationId: undeleteApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/changeOwner/{userName}':
    post:
      tags:
        - Applications
      description:  |
        Change owner of an application. Applies to all versions.
      operationId: changeAppOwner
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Application owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/history':
    get:
      tags:
        - Applications
      description: |
        Retrieve history of changes for a given appId.
      operationId: getHistory
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: History successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAppHistory'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/apps/perms/{appId}/user/{userName}':
    get:
      tags:
        - Permissions
      description:  |
        Retrieve all application related permissions for a given application and user.
      operationId: getUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      description:  |
        Create permissions in the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: grantUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      description:  |
        Remove permissions from the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      description:  |
        Remove user permission from the Security Kernel. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/apps/share/{appId}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for an app
      description: |
        Retrieve all sharing information for an app. This includes all users with whom the app
        has been shared and whether or not the app has been made publicly available.
      operationId: getShareInfo
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share an app with one or more users.
      description: |
        Create or update sharing information for an app. The app will be shared with the list of users
        provided in the request body. Requester must be owner of the app.
      operationId: shareApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/share_public/{appId}':
    post:
      tags:
        - Sharing
      summary: Share an app publicly with all users in the tenant.
      description: |
        Share an app with all users in the tenant. Requester must be owner of the app.
      operationId: shareAppPublic
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: App shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/unshare/{appId}':
    post:
      tags:
        - Sharing
      summary: Unshare an app with one or more users.
      description: |
        Create or update sharing information for an app. The app will be unshared with the list of users
        provided in the request body. Requester must be owner of the app.
      operationId: unShareApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/unshare_public/{appId}':
    post:
      tags:
        - Sharing
      summary: Remove public access for an app.
      description: |
        Remove public sharing for an app. Requester must be owner of the app.
      operationId: unShareAppPublic
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: App public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
           description: Permission denied.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisApp -----------------------------------------------------------------
    TapisApp:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        locked:
          type: boolean
          default: false
        isPublic:
          type: boolean
        sharedWithUsers:
          type: array
          items:
            type: string
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
        sharedAppCtx:
          $ref: '#/components/schemas/UserNameString'
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- RuntimeOptions --------------------------------------------------------
    RuntimeOptions:
      type: array
      items:
        $ref: '#/components/schemas/RuntimeOptionEnum'
    # --- JobAttributes --------------------------------------------------------
    JobAttributes:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        dynamicExecSystem:
          type: boolean
          default: false
        execSystemConstraints:
          type: array
          minItems: 1
          items:
            type: string
            minLength: 3
        execSystemId:
          $ref: '#/components/schemas/IdString'
        execSystemExecDir:
          $ref: '#/components/schemas/DirString'
        execSystemInputDir:
          $ref: '#/components/schemas/DirString'
        execSystemOutputDir:
          $ref: '#/components/schemas/DirString'
        execSystemLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        archiveSystemId:
          $ref: '#/components/schemas/IdString'
        archiveSystemDir:
          $ref: '#/components/schemas/DirString'
        archiveOnAppError:
          type: boolean
          default: true
        isMpi:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        cmdPrefix:
          type: string
          minLength: 1
          maxLength: 126
        parameterSet:
          $ref: '#/components/schemas/ParameterSet'
        fileInputs:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInput'
        fileInputArrays:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInputArray'
        nodeCount:
          type: integer
        coresPerNode:
          type: integer
        memoryMB:
          type: integer
        maxMinutes:
          type: integer
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/ReqSubscribe'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
    # --- ParameterSet --------------------------------------------------------
    ParameterSet:
      type: object
      properties:
        appArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        containerArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        schedulerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        envVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        archiveFilter:
          type: object
          properties:
            includes:
              type: array
              items:
                type: string
                minLength: 1
            excludes:
              type: array
              items:
                type: string
                minLength: 1
            includeLaunchFiles:
                type: boolean
                default: true
        logConfig:
          type: object
          required:
            - stdoutFilename
            - stderrFilename
          properties:
            stdoutFilename:
              type: string
            stderrFilename:
              type: string
    # --- AppFileInput --------------------------------------------------------
    AppFileInput:
      type: object
      required:
        - name
        - targetPath
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        autoMountLocal:
          type: boolean
          default: true
        notes:
          type: object
        sourceUrl:
          type: string
          minLength: 1
        targetPath:
          type: string
          minLength: 1
    # --- AppFileInputArray --------------------------------------------------------
    AppFileInputArray:
      type: object
      required:
        - name
        - targetDir
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        notes:
          type: object
        sourceUrls:
          type: array
          items:
            type: string
            minLength: 1
        targetDir:
          type: string
          minLength: 1
    # --- AppArgSpec --------------------------------------------------------------
    AppArgSpec:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/ArgInputModeEnum'
        arg:
          type: string
          minLength: 1
        notes:
          type: object
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""
        description:
          $ref: '#/components/schemas/DescriptionString'
        inputMode:
          $ref: '#/components/schemas/KeyValueInputModeEnum'
        notes:
          type: object
    # --- ReqSubscribe -------------------------------------------
    ReqSubscribe:
      type: object
      required:
        - jobEventCategoryFilter
        - deliveryTargets
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        enabled:
          type: boolean
          default: true
        jobEventCategoryFilter:
          $ref: '#/components/schemas/JobEventCategoryFilter'
        ttlMinutes:
          type: integer
          default: 10080
        deliveryTargets:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NotifDeliveryTarget'
    # --- NotifDeliveryTarget ------------------------------------------------------------
    NotifDeliveryTarget:
      type: object
      required:
        - deliveryMethod
        - deliveryAddress
      properties:
        deliveryMethod:
          $ref: '#/components/schemas/NotifDeliveryMethod'
        deliveryAddress:
          type: string
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    AppVersionString:
      type: string
      minLength: 1
      maxLength: 64
    DescriptionString:
      type: string
      maxLength: 2048
    ArgDescriptionString:
      type: string
      maxLength: 8096
    InputNameString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128
    # --- AppHistory ------------------------------------------------------------------
    AppHistory:
      type: object
      properties:
        appVersion:
          type: string
        jwtTenant:
          type: string
        jwtUser:
          $ref: '#/components/schemas/UserNameString'
        oboTenant:
          type: string
        oboUser:
          $ref: '#/components/schemas/UserNameString'
        operation:
          $ref: '#/components/schemas/OperationTypeEnum'
        description:
          type: string
        created:
          type: string
    # --- ShareInfo ------------------------------------------------------------------
    ShareInfo:
      type: object
      required:
        - public
        - userList
      properties:
        public:
          type: boolean
        userList:
          type: array
          items:
            $ref: '#/components/schemas/UserNameString'
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostApp:
      type: object
      required:
        - id
        - version
        - containerImage
      properties:
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        locked:
          type: boolean
          default: false
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPatchApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPutApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchApps:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespApp:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
    RespApps:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespAppHistory:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AppHistory'
        metadata:
          type: object
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ShareInfo'
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - SHARED_PUBLIC
        - SHARED_DIRECT
        - READ_PERM
        - MINE
        - ALL
    JobTypeEnum:
      type: string
      enum:
        - BATCH
        - FORK
    RuntimeEnum:
      type: string
      enum:
        - SINGULARITY
        - DOCKER
    # NOTE: RuntimeOption starts with NONE due to a bug in client code generation.
    #       Without an initial entry the prefix SINGULARITY_ gets stripped off the other 2 entries.
    RuntimeOptionEnum:
      type: string
      enum:
        - NONE
        - SINGULARITY_START
        - SINGULARITY_RUN
    NotifDeliveryMethod:
      type: string
      enum:
        - WEBHOOK
        - EMAIL
    JobEventCategoryFilter:
      type: string
      enum:
        - ALL
        - JOB_NEW_STATUS
        - JOB_INPUT_TRANSACTION_ID
        - JOB_ARCHIVE_TRANSACTION_ID
        - JOB_ERROR_MESSAGE
        - JOB_SUBSCRIPTION
    FileInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - OPTIONAL
        - FIXED
      default: OPTIONAL
    ArgInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_ON_DEMAND
    KeyValueInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_BY_DEFAULT
    OperationTypeEnum:
      type: string
      enum:
        - CREATE
        - READ
        - MODIFY
        - EXECUTE
        - DELETE
        - UNDELETE
        - HARD_DELETE
        - CHANGE_OWNER
        - ENABLE
        - DISABLE
        - LOCK
        - UNLOCK
        - GET_PERMS
        - GRANT_PERMS
        - REVOKE_PERMS
