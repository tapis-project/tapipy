openapi: 3.0.3
info:
  title: Tapis Systems API
  description: The Tapis Systems API provides for management of Tapis Systems including permissions, credentials and Scheduler Profiles.
  version: '1.4.2'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Systems API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Systems
    description: Manage Tapis system resources. Create, retrieve, update, etc.
  - name: Credentials
    description: Manage Tapis system user access credentials.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of resources. The system owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
      Note that Tapis permissions are independent of native permissions enforced by the underlying
      system host.
  
      Tapis also supports a higher level approach to granting access known as *Sharing*.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows you to share a system with a set of users
      as well as share publicly with all users in a tenant. Sharing grants users READ and EXECUTE access to the system.
      When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls
      made through the Files service.
      Note that Tapis permissions and sharing are independent of native permissions enforced by the underlying
      system host.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /systems -----------------------------------------------------
  '/v3/systems/healthcheck':
    get:
      tags:
        - General
      description: Health check. Lightweight non-authenticated check that service is alive.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/systems/readycheck':
    get:
      tags:
        - General
      description: Ready check. Non-authenticated check that service is ready to do work.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service not ready.

  '/v3/systems':
    get:
      tags:
        - Systems
      description: |
        Retrieve list of systems. Use *listType*, *search* and *select* query parameters to limit results. Query
        parameter *listType* allows for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: getSystems
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query parameter. For example search=(id.like.MySys*)~(enabled.eq.true)
          schema:
            type: string
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Systems marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      description: |
        Create a system using a request body. System name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphanumeric character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        The attribute *host* represents a host name, IP address, Globus Endpoint Id or Globus Collection Id.

        The attribute *effectiveUserId* determines the host login user, the user used to access the underlying host.
        The attribute can be set to a static string indicating a specific user (such as a service account) or
        dynamically specified as *${apiUserId}*. For the case of *${apiUserId}*, the service resolves the variable by
        extracting the identity from the request to the service (i.e. the JWT) and applying a mapping to a host login
        user if such a mapping has been provided. If no mapping is provided, then the extracted identity is taken to be
        the host login user.

        If the *effectiveUserId* is static (i.e. not *${apiUserId}*) then credentials may optionally be provided in the
        *authnCredential* attribute of the request body. The Systems service does not store the secrets in its
        database, they are persisted in the Security Kernel.

        By default for LINUX and S3 type systems credentials provided are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        The attribute *rootDir* serves as an effective root directory when operating on files through the Tapis
        Files service. When using Files to list, copy, move, mkdir, etc. all paths are relative to this directory.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a POST request to create a system.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - deleted
          - created
          - updated
      operationId: createSystem
      parameters:
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation (for LINUX and S3). Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/{parentId}/createChildSystem':
    post:
      tags:
        - Child Systems
      description: |
        Create a child system.  The child system gets all of it's attributes from it's parent except for the following
        fields:
          - *id*
          - *effectiveUserId*
          - *rootDir*
          - *owner*

        The owner will be the user who is creating the system. The caller must have read permission to the parent.
        system.
      operationId: createChildSystem
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying the attributes of the child system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostChildSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/search':
    get:
      tags:
        - Systems
      description: |
        Retrieve details for systems. Use query parameters to specify search conditions. For example owner.eq=jdoe&port.gt=1024
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchSystemsQueryParameters
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      description: |
        Retrieve details for systems. Use request body to specify SQL-like search conditions.
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchSystemsRequestBody
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSystems'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/match/constraints':
    post:
      tags:
        - Systems
      description: |
        *WARNING Capability constraint matching is not yet supported.*
        Retrieve details for systems. Use request body to specify constraint conditions as an SQL-like WHERE clause.
      operationId: matchConstraints
      requestBody:
        required: true
        description: A JSON object specifying SQL-like constraint conditions as an array of strings. Strings are concatenated to form full query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqMatchConstraints'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}':
    get:
      tags:
        - Systems
      description: |
        Retrieve information for a system given the system Id.

        Use query parameter authnMethod=<method> to override the default authentication method.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*.

        Certain services may use the query parameter *sharedAppCtx* to indicate that the request is in a shared
        application context.
      operationId: getSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if this is null.
          schema:
            type: string
            default: ''
        - name: requireExecPerm
          in: query
          description: Check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'allAttributes'
        - name: returnCredentials
          in: query
          description: Restricted. Only certain Tapis services are authorized to get credentials.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedAppCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context. Must be set to the grantor who shared the application.
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Systems
      description: |
        Update selected attributes of a system. Request body may only contain updatable attributes. System must exist.

        Attributes that may not be updated via PATCH are

          - id
          - systemType
          - owner
          - enabled
          - bucketName
          - rootDir
          - isDtn
          - canExec

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: patchSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Systems
      description: |
        Update all updatable attributes of a system using a request body identical to POST. System must exist.

        If the *effectiveUserId* is static (i.e. not *${apiUserId}*) then credentials may optionally be provided in the
        *authnCredential* attribute of the request body. The Systems service does not store the secrets in its
        database, they are persisted in the Security Kernel.


        By default for LINUX and S3 type systems credentials provided are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a PUT request to update a system.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - deleted
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - id
          - systemType
          - owner
          - enabled
          - bucketName
          - rootDir
          - isDtn
          - canExec

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: putSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation (for LINUX and S3). Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/isEnabled':
    get:
      tags:
        - Systems
      description: |
        Check if a system is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/enable':
    post:
      tags:
        - Systems
      description: |
        Mark a system available for use.
      operationId: enableSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/disable':
    post:
      tags:
        - Systems
      description: |
        Mark a system unavailable for use.
      operationId: disableSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/delete':
    post:
      tags:
        - Systems
      description: |
        Mark a system as deleted. System will not appear in queries unless explicitly requested.
      operationId: deleteSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/undelete':
    post:
      tags:
        - Systems
      description: |
        Mark a system as not deleted. System will appear in queries.
      operationId: undeleteSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/changeOwner/{userName}':
    post:
      tags:
        - Systems
      description: |
        Change owner of a system.
      operationId: changeSystemOwner
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: System owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/history':
    get:
      tags:
        - Systems
      description: |
        Retrieve history of changes for a given systemId.
      operationId: getHistory
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: History successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystemHistory'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{childSystemId}/unlinkFromParent':
    post:
      tags:
        - Child Systems
      description: |
        Make a child system a standalone system.  This will break the connection with it's parent, and from
        this point on, the child system will not be connected to the parent.  Warning, this cannot be undone.
      operationId: unlinkFromParent
      parameters:
        - name: childSystemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System separated from parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/{parentSystemId}/unlinkChildren':
    post:
      tags:
        - Child Systems
      description: |
        Make a child system a standalone system.  This will break the connection with it's parent, and from
        this point on, the child system will not be connected to the parent.  This is similar to unlinkFromParent,
        but permissions are required for the parent system rather than the child system.  Warning, this cannot be undone.
      operationId: unlinkChildren
      parameters:
        - name: parentSystemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: all
          in: query
          description: Unlink all children from the parent. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: false
        description: A JSON object containing information about which systems should be unlinked.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUnlinkChildren'
      responses:
        '200':
          description: System separated from parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /credentials ------------------------------------------------
  '/v3/systems/credential/{systemId}/user/{userName}':
    get:
      tags:
        - Credentials
      description: |
        Restricted. Only certain Tapis services authorized.

        Retrieve credentials for given system, target *userName* and authentication method.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is
        interpreted as a Tapis user. Note that there may me a mapping of the Tapis user to a host *loginUser*.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the host *loginUser* that is used when accessing the host.

        Desired authentication method may be specified using query parameter authnMethod=<method>. If desired
        authentication method not specified then credentials for the system's default authentication method are returned.

        The result includes the attribute *authnMethod* indicating the authentication method associated with
        the returned credentials.
      operationId: getUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCredential'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Credentials
      description: |
        Create or update credentials in the Security Kernel for given system and target *userName* using a request body.
        Credentials for multiple authentication methods may be provided.

        The Systems service does not store the secrets in its database, they are persisted in the Security Kernel.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is interpreted
        as a Tapis user and the request body may contain the optional attribute *loginUser* which will be used to map the
        Tapis user to a username to be used when accessing the system. If the login user is not provided then there is
        no mapping and the Tapis user is always used when accessing the system.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the login user to be used when accessing the host.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.

        By default credentials for LINUX and S3 type systems are verified. Use query parameter
        *skipCredentialCheck=true* to bypass initial credential validation.
      operationId: createUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateCredential'
      responses:
        '200':
          description: Credentials updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Credentials
      description: |
        Remove credentials from the Security Kernel for given system and *target user*. Requester must be owner of the system.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.
      operationId: removeUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Credentials removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/{systemId}/user/{userName}/check':
    post:
      tags:
        - Credentials
      description: |
        Check user credentials by connecting to the system host. Not supported for all system types. Currently supported
        for LINUX and S3 type systems.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is interpreted
        as a Tapis user and a search is made for credentials associated with *{userName}*.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the login user to be used when accessing the host. Note that this would typically be the current
        *effectiveUserId* defined for the system, but that is not a requirement. This allows for registering and
        checking credentials for a login user prior to updating the system definition.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.

        Desired authentication method may be specified using query parameter authnMethod=<method>. If not specified,
        then credentials for the system's default authentication method are verified.
      operationId: checkUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when verifying, system default method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/globus/authUrl':
    get:
      tags:
        - Credentials
      summary: Retrieve a Globus URL that can be used to generate an authorization code for an OAuth2 flow.
      description: |
        Retrieve a Globus URL + Session Id that can be used to generate an oauth2 authorization code.
        In Globus the code is referred to as a *Native App Authorization Code*.
        The host property of the system is used as the Globus Endpoint Id or Globus Collection Id.
        Once a user has obtained an authorization code, the corresponding Systems endpoint for generating
        Globus tokens should be called to exchange the code + sessionId for a pair of access and refresh tokens.
        The session Id is a Tapis Id that is used to track the oauth2 flow that is started when this call is made.
        The authorization code, as per Globus documentation, is valid for 10 minutes.
        Please note that the Tapis installation for your site must be configured by the site administrator to
        support systems of type GLOBUS.
      operationId: getGlobusAuthUrl
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGlobusAuthUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/{systemId}/user/{userName}/globus/tokens/{authCode}/{sessionId}':
    post:
      tags:
        - Credentials
      summary: Use a Globus authorization code + Tapis session Id to generate tokens
      description: |
        Use a Globus *Native App Authorization Code* and a Tapis session Id to generate a pair of access and refresh tokens.
        The Systems service will use the Tapis Security Kernel to store the tokens for the given system and user.
        The session Id is a Tapis Id that is used to track the oauth2 flow that is started when a call to the
        getGlobusAuthUrl endpoint is made.
        The authorization code, as per Globus documentation, is valid for 10 minutes.
        Please note that the Tapis installation for your site must be configured by the site administrator to
        support systems of type GLOBUS.
      operationId: generateGlobusTokens
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authCode
          in: path
          required: true
          description: Authorization code to be exchanged for tokens.
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          description: Tapis session Id tracking the OAuth2 flow.
          schema:
            type: string
      responses:
        '200':
          description: Tokens generated and credentials updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/systems/perms/{systemId}/user/{userName}':
    get:
      tags:
        - Permissions
      description: |
        Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      description: |
        Create permissions in the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE. MODIFY implies READ.
      operationId: grantUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      description: |
        Remove permissions from the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      description: |
        Remove system user permission from the Security Kernel. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/systems/share/{systemId}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for a system
      description: |
        Retrieve all sharing information for a system. This includes all users with whom the system
        has been shared and whether or not the system has been made publicly available.
      operationId: getShareInfo
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share a system with one or more users.
      description: |
        Create or update sharing information for a system. The system will be shared with the list of users
        provided in the request body. Sharing allows READ and EXECUTE access. When the system has a dynamic
        *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the
        Files service. Requester must be owner of the system.
      operationId: shareSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/share_public/{systemId}':
    post:
      tags:
        - Sharing
      summary: Share a system publicly with all users in the tenant.
      description: |
        Share a system with all users in the tenant. Sharing allows READ and EXECUTE access.
        When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access
        to all paths for calls made through the Files service.
        Requester must be owner of the system.
      operationId: shareSystemPublic
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/unshare/{systemId}':
    post:
      tags:
        - Sharing
      summary: Unshare a system with one or more users.
      description: |
        Create or update sharing information for a system. The system will be unshared with the list of users
        provided in the request body. Requester must be owner of the system.
      operationId: unShareSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/unshare_public/{systemId}':
    post:
      tags:
        - Sharing
      summary: Remove public access for a system.
      description: |
        Remove public sharing for a system. Requester must be owner of the system.
      operationId: unShareSystemPublic
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    
    # --- Paths for /schedulerProfile ------------------------------------------------
  '/v3/systems/schedulerProfile':
    get:
      tags:
        - Scheduler Profiles
      description: Retrieve list of scheduler profiles.
      operationId: getSchedulerProfiles
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfiles'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Scheduler Profiles
      description: |
        Create a scheduler profile using a request body. Name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphabetic character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        Note that certain attributes (such as *tenant*) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create a profile.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - created
          - updated
      operationId: createSchedulerProfile
      requestBody:
        required: true
        description: A JSON object specifying information for the profile to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSchedulerProfile'
      responses:
        '201':
          description: Scheduler profile created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Scheduler profile already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/schedulerProfile/{name}':
    get:
      tags:
        - Scheduler Profiles
      description: |
        Retrieve information for a scheduler profile given the profile name.
      operationId: getSchedulerProfile
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfile'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Scheduler profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Scheduler Profiles
      description: |
        Remove a scheduler profile given the profile name. Requester must be owner of the profile.
      operationId: deleteSchedulerProfile
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Scheduler profile deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisSystem ------------------------------------------------------------------
    TapisSystem:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/SysId'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        host:
          $ref: '#/components/schemas/SysHost'
        enabled:
          $ref: '#/components/schemas/Enabled'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          $ref: '#/components/schemas/BucketName'
        rootDir:
          $ref: '#/components/schemas/RootDir'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        isPublic:
          type: boolean
        isDynamicEffectiveUser:
          type: boolean
        isDtn:
          type: boolean
          default: false
        canExec:
          type: boolean
          description: Indicates if system can be used to execute jobs.
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
          default: 2147483647
        jobMaxJobsPerUser:
          type: integer
          default: 2147483647
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        sharedWithUsers:
          type: array
          items:
            type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- SystemHistory ------------------------------------------------------------------
    SystemHistory:
      type: object
      properties:
        jwtTenant:
          type: string
        jwtUser:
          $ref: '#/components/schemas/UserNameString'
        oboTenant:
          type: string
        oboUser:
          $ref: '#/components/schemas/UserNameString'
        operation:
          $ref: '#/components/schemas/OperationTypeEnum'
        description:
          type: string
        created:
          type: string
    # --- JobRuntime ------------------------------------------------------------------
    JobRuntime:
      type: object
      required:
        - runtimeType
      properties:
        runtimeType:
          $ref: '#/components/schemas/RuntimeTypeEnum'
        version:
          type: string
    # --- SchedulerProfile ------------------------------------------------------------------
    SchedulerProfile:
      type: object
      required:
        - name
      properties:
        tenant:
          type: string
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        moduleLoads:
          type: array
          items:
            $ref: '#/components/schemas/ModuleLoadSpec'
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'

    # --- ModuleLoadSpec ------------------------------------------------------------------
    ModuleLoadSpec:
      type: object
      required:
        - moduleLoadCommand
      properties:
        moduleLoadCommand:
          type: string
          minLength: 1
        modulesToLoad:
          type: array
          items:
            type: string
            minLength: 1

    # --- LogicalQueue ------------------------------------------------------------------
    LogicalQueue:
      type: object
      required:
        - name
        - hpcQueueName
      properties:
        name:
          $ref: '#/components/schemas/QueueNameString'
        hpcQueueName:
          $ref: '#/components/schemas/QueueNameString'
        maxJobs:
          type: integer
          default: 2147483647
        maxJobsPerUser:
          type: integer
          default: 2147483647
        minNodeCount:
          type: integer
        maxNodeCount:
          type: integer
        minCoresPerNode:
          type: integer
        maxCoresPerNode:
          type: integer
        minMemoryMB:
          type: integer
        maxMemoryMB:
          type: integer
        minMinutes:
          type: integer
        maxMinutes:
          type: integer
    # --- Capability ------------------------------------------------------------------
    Capability:
      type: object
      required:
        - category
        - name
        - datatype
      properties:
        category:
          $ref: '#/components/schemas/CategoryEnum'
        name:
          type: string
        datatype:
          $ref: '#/components/schemas/DatatypeEnum'
        precedence:
          type: integer
        value:
          type: string
    # --- Credential ------------------------------------------------------------------
    Credential:
      type: object
      properties:
        authnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        loginUser:
          $ref: '#/components/schemas/UserNameString'
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        certificate:
          type: string
    # --- ShareInfo ------------------------------------------------------------------
    ShareInfo:
      type: object
      required:
        - public
        - userList
      properties:
        public:
          type: boolean
        userList:
          type: array
          items:
            $ref: '#/components/schemas/UserNameString'
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""
        description:
          $ref: '#/components/schemas/DescriptionString'
        inputMode:
          $ref: '#/components/schemas/KeyValueInputModeEnum'
        notes:
          type: object

    # --- String types with constraints ------------------------------------
    SysHost:
      type: string
      minLength: 1
      maxLength: 256
      description: FQDN, IP address, Globus endpoint ID or Globus collection ID.
    HostString:
      type: string
      minLength: 1
      maxLength: 256
    SysId:
      type: string
      minLength: 1
      maxLength: 80
      description: Short descriptive name for the system that is unique within the tenant.
    DtnSysId:
      type: string
      minLength: 1
      maxLength: 80
      description: An alternate system to use as a Data Transfer Node (DTN) during job execution.
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    EffectiveUserId:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
      description: Username to use when accessing the system. A specific user (such as a service account) or the dynamic user ``${apiUserId}``.
    Enabled:
      type: boolean
      default: true
      description: Indicates if system is currently considered active and available for use.
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DescriptionString:
      type: string
      maxLength: 2048
      description: Optional more verbose description.
    BucketName:
      type: string
      description: Name of the bucket for an S3 type system.
    ArgDescriptionString:
      type: string
      maxLength: 8096
    RootDir:
      type: string
      minLength: 1
      maxLength: 4096
      description: Effective root directory to be used when listing files or moving files to and from the system.
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128

    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSystem:
      type: object
      required:
        - id
        - systemType
        - host
        - defaultAuthnMethod
        - canExec
      properties:
        id:
          $ref: '#/components/schemas/SysId'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          type: string
          description: A specific user set at system creation.
        host:
          $ref: '#/components/schemas/SysHost'
        enabled:
          $ref: '#/components/schemas/Enabled'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/ReqPostPutCredential'
        bucketName:
          type: string
          description: Name of the bucket for an S3 type system.
        rootDir:
          $ref: '#/components/schemas/RootDir'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        dtnMountPoint:
          type: string
          description: Mount point (aka target) used when running the mount command on this system. Used during job execution.
        dtnMountSourcePath:
          type: string
          description: The path exported by *dtnSystemId* that matches the *dtnMountPoint* on this system. This will be relative to *rootDir* on *dtnSystemId*. Used during job execution.
        isDtn:
          type: boolean
          default: false
          description: Indicates if system will be used as a data transfer node (DTN).
        canExec:
          type: boolean
          description: Indicates if system can be used to execute jobs.
        canRunBatch:
          type: boolean
          default: false
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
          description: Indicates if system allows a job submission request to specify a *cmdPrefix*.
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
          description: List of tags as simple strings.
        notes:
          type: object
          description: Metadata in the form of a Json object. Not used by Tapis.
        importRefId:
          type: string
    ReqPostChildSystem:
      type: object
      required:
        - effectiveUserId
        - rootDir
      properties:
        id:
          $ref: '#/components/schemas/SysId'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        rootDir:
          $ref: '#/components/schemas/RootDir'
    ReqPutSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/SysHost'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/ReqPostPutCredential'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
    ReqPatchSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/SysHost'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
        allowChildren:
          type: boolean
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
    ReqPostPutCredential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        certificate:
          type: string
    ReqUpdateCredential:
      type: object
      properties:
        loginUser:
          $ref: '#/components/schemas/UserNameString'
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        certificate:
          type: string
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchSystems:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    ReqMatchConstraints:
      type: object
      required:
        - match
      properties:
        match:
          type: array
          minItems: 1
          items:
            type: string
    ReqPostSchedulerProfile:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          type: string
        moduleLoads:
          type: array
          items:
            $ref: '#/components/schemas/ModuleLoadSpec'
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            type: string
    ReqUnlinkChildren:
      type: object
      properties:
        childSystemIds:
          type: array
          description: List containing the IDs of the child systems to unlink from the parent system.
          minItems: 1
          items:
            $ref: '#/components/schemas/IdString'
 
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
    RespSystems:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespSystemHistory:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/SystemHistory'
        metadata:
          type: object
    RespCredential:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/Credential'
        metadata:
          type: object
    RespSchedulerProfile:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    RespSchedulerProfiles:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    RespGlobusAuthUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultGlobusAuthUrl'
        metadata:
          type: object
    ResultGlobusAuthUrl:
      type: object
      properties:
        url:
          type: string
        sesssionId:
          type: string
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ShareInfo'
        metadata:
          type: object

    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    SystemTypeEnum:
      type: string
      description: Type of system
      enum:
        - LINUX
        - S3
        - IRODS
        - GLOBUS
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - SHARED_PUBLIC
        - ALL
    AuthnEnum:
      type: string
      enum:
        - PASSWORD
        - PKI_KEYS
        - ACCESS_KEY
        - TOKEN
        - CERT
    CategoryEnum:
      type: string
      enum:
        - SCHEDULER
        - OS
        - HARDWARE
        - SOFTWARE
        - JOB
        - CONTAINER
        - MISC
        - CUSTOM
    DatatypeEnum:
      type: string
      enum:
        - STRING
        - INTEGER
        - BOOLEAN
        - NUMBER
        - TIMESTAMP
    RuntimeTypeEnum:
      type: string
      enum:
        - DOCKER
        - SINGULARITY
    SchedulerTypeEnum:
      type: string
      enum:
        - SLURM
        - CONDOR
        - PBS
        - SGE
        - UGE
        - TORQUE
    SchedulerHiddenOptionEnum:
      type: string
      enum:
        - MEM
    OperationTypeEnum:
      type: string
      enum:
        - CREATE
        - READ
        - MODIFY
        - EXECUTE
        - DELETE
        - UNDELETE
        - CHANGE_OWNER
        - ENABLE
        - DISABLE
        - GET_PERMS
        - REVOKE_PERMS
        - SET_CRED
        - REMOVE_CRED
        - GET_CRED
    KeyValueInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_BY_DEFAULT
