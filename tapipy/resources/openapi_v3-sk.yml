openapi: 3.0.1
info:
  title: Tapis Security API
  description: The Tapis Security API provides access to the Tapis Security Kernel authorization and secrets facilities.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave/en/latest/
servers:
  - url: http://localhost:8080/v3
    description: Local test environment
    variables: {}
tags:
  - name: role
    description: manage roles and permissions
  - name: user
    description: assign roles and permissions to users
  - name: share
    description: share resources among users
  - name: vault
    description: manage application and user secrets
  - name: general
    description: informational endpoints
paths:
  /security/role/addChild:
    post:
      tags:
        - role
      description: |-
        Add a child role to another role using a request body.  If the child already exists, then the request has no effect and the change count returned is zero. Otherwise, the child is added and the change count is one.

        The user@tenant identity specified in JWT is authorized to make this request only if that user is an administrator or if the user owns both the parent and child roles.
      operationId: addChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqAddChildRole'
        required: true
      responses:
        '200':
          description: Child assigned to parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/addPerm:
    post:
      tags:
        - role
      description: |-
        Add a permission to an existing role using a request body.  If the permission already exists, then the request has no effect and the change count returned is zero. Otherwise, the permission is added and the change count is one.

        Permissions are case-sensitive strings that follow the format defined by Apache Shiro (https://shiro.apache.org/permissions.html).  This format defines any number of colon-separated (:) parts, with the possible use of asterisks (*) as wildcards and commas (,) as aggregators.  Here are two example permission strings:

            system:MyTenant:read,write:system1
            system:MyTenant:create,read,write,delete:*

        See the Shiro documentation for further details.  Note that the three reserved characters, [: * ,], cannot appear in the text of any part.  It's the application's responsibility to escape those characters in a manner that is safe in the application's domain.

        ### Extended Permissions
        Tapis extends Shiro permission checking with *path semantics*.  Path semantics allows the last part of pre-configured permissions to be treated as hierarchical path names, such as the paths used in POSIX file systems.  Currently, only permissions that start with *files:* have their last (5th) component configured with path semantics.

        Path semantics treat the extended permission part as the root of the subtree to which the permission is applied recursively.  Grantees assigned the permission will have the permission on the path itself and on all its children.

        As an example, consider a role that's assigned the following permission:

            files:iplantc.org:read:stampede2:/home/bud

        Users granted the role have read permission on the following file system resources on stampede2:

            /home/bud
            /home/bud/
            /home/bud/myfile
            /home/bud/mydir/myfile

        Those users, however, will not have access to /home.

        When an extended permission part ends with a slash, such as /home/bud/, then that part is interpreted as a directory or, more generally, some type of container.  In such cases, the permission applies to the children of the path and to the path as written with a slash.  For instance, for the file permission path /home/bud/, the permission allows access to /home/bud/ and /home/bud/myfile, but not to /home/bud.

        When an extended permission part does not end with a slash, such as /home/bud, then the permission applies to the children of the path and to the path written with or without a trailing slash.  For instance, for the file permission path /home/bud, the permission allows access to /home/bud, /home/bud/ and /home/bud/myfile.

        In the previous examples, we assumed /home/bud was a directory.  If /home/bud is a file (or more generally a leaf), then specifying the permission path /home/bud/ will not work as intended.  Permissions with paths that have trailing slashes should only be used for directories, and they require a trailing slash whenever refering to the root directory.  Permissions that don't have a trailing slash can represent directories or files, and thus are more general.

        Extended permission checking avoids *false capture*.  Whether a path has a trailing slash or not, permission checking will not capture similarly named sibling paths. For example, using the file permission path /home/bud, grantees are allowed access to /home/bud and all its children (if it's a directory), but not to the file /home/buddy.txt nor the directory /home/bud2.

        This request is authorized only if the authenticated user is either the role owner or an administrator.
      operationId: addRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqAddRolePermission'
        required: true
      responses:
        '200':
          description: Permission assigned to role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role:
    get:
      tags:
        - role
      description: |-
        Get the names of all roles in the tenant in alphabetic order.  Future enhancements will include search filtering.

        A valid tenant must be specified as a query parameter.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRoleNames
      parameters:
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of role names returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - role
      description: |-
        Create a role using a request body.  Role names are case sensitive, alpha-numeric strings that can also contain underscores.  Role names must start with an alphbetic character and can be no more than 58 characters in length.  The desciption can be no more than 2048 characters long.  If the role already exists, this request has no effect.

        For the request to be authorized, the requestor must be either an administrator or a service allowed to perform updates in the new role's tenant.
      operationId: createRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateRole'
        required: true
      responses:
        '200':
          description: Role existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '201':
          description: Role created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/{roleName}:
    get:
      tags:
        - role
      description: Get the named role's definition.  A valid tenant must be specified as a query parameter.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespRole'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - role
      description: |-
        Delete the named role. A valid tenant and user must be specified as query parameters.

        This request is authorized only if the authenticated user is either the role owner or an administrator.
      operationId: deleteRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Role deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/defaultRole/{user}:
    get:
      tags:
        - role
      description: |+
        Get a user's default role. The default role is implicitly created by the system when needed if it doesn't already exist. No authorization required.

        A user's default role is constructed by prepending '$$' to the user's name.  This implies the maximum length of a user name is 58 since role names are limited to 60 characters.

      operationId: getDefaultUserRole
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The user's default role name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/{roleName}/perms:
    get:
      tags:
        - role
      description: |-
        Get the named role's permissions.  By default, all permissions assigned to the role, whether directly and transitively through child roles, are returned.  Set the immediate query parameter to only retrieve permissions directly assigned to the role.  A valid tenant must be specified.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRolePermissions
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: immediate
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/previewPathPrefix:
    post:
      tags:
        - role
      description: |-
        This read-only endpoint previews the transformations that would take place if the same input was used on a replacePathPrefix POST call. This call is also implemented as a POST so that the same input as used on replacePathPrefix can be used here, but this call changes nothing.

        This endpoint can be used to get an accounting of existing system/path combinations that match the input specification. Such information is useful when trying to duplicate a set of permissions. For example, one may want to copy a file subtree to another location and assign the same permissions to the new subtree as currently exist on the original subtree. One could use  this call to calculate the users that should be granted permission on the new subtree.

        The optional parameters are roleName, oldPrefix and newPrefix. No wildcards are defined for the path prefix parameters.  When roleName is specified then only permissions assigned to that role are considered.

        When the oldPrefix parameter is provided, it's used to filter out permissions whose paths do not begin with the specified string; when not provided, no path prefix filtering occurs.

        When the newPrefix parameter is not provided no new characters are prepended to the new path, effectively just removing the oldPrefix from the new path. When neither oldPrefix nor newPrefix are provided, no path transformation occurs, though system IDs can still be transformed.

        The result object contains an array of transformation objects, each of which contains the unique permission sequence number, the existing permission that matched the search criteria and the new permission if the specified transformations were applied.

        A valid tenant and user must be specified in the request body.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: previewPathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPreviewPathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes previewed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPathPrefixes'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removeChild:
    post:
      tags:
        - role
      description: |-
        Remove a child role from a parent role using a request body.  A valid tenant and user must be specified in the request body.

        The user@tenant identity specified in JWT is authorized to make this request only if that user is an administrator or if they own the parent role.
      operationId: removeChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemoveChildRole'
        required: true
      responses:
        '200':
          description: Child removed from parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePathPermFromAllRoles:
    post:
      tags:
        - role
      description: |-
        Remove an extended permission from all roles in a tenant using a request body.  The tenant and permission must be specified in the request body.

        Each role in the tenant is searched for the extended permission string and, where found, that permission is removed.  The matching algorithm is string comparison with wildcard semantics on the path component.  This is the same as an exact string match for all parts of the permission specification up to the path part.  A match on the path part, however, occurs when its path is a prefix of a role permission's path.  Consider the following permission specification:

            files:mytenant:read:mysystem:/my/dir

        which will match both of the following role permissions:

            files:mytenant:read:mysystem:/my/dir/subdir/myfile
            files:mytenant:read:mysystem:/my/dir33/yourfile

        Note that a match to the second role permission might be a *false capture* if the intension was to remove all permissions to resources in the /my/dir subtree, but not those in other directories.  To avoid this potential problem, callers can make two calls, one to this endpoint with a permSpec that ends with a slash ("/") and one to the removePermissionFromeAllRoles endpoint with no trailing slash.  The former removes all children from the directory subtree, the latter removes the directory itself.

        Only the Files service is authorized to make this call.
      operationId: removePathPermissionFromAllRoles
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemovePermissionFromAllRoles'
        required: true
      responses:
        '200':
          description: Path permission removed from roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePermFromAllRoles:
    post:
      tags:
        - role
      description: |-
        Remove a permission from all roles in a tenant using a request body.  The tenant and permission must be specified in the request body.

        Each role in the tenant is searched for the *exact* permission string and, where found, that permission is removed.  The matching algorithm is simple, character by character, string comparison.

        Permissions are not interpreted.  For example, a permission that contains a wildcard (*) will only match a role's permission when the same wildcard is found in the exact same position.  The same rule applies to permission segments with multiple, comma separated components: a match requires the exact same ordering and spacing of components.

        Only services are authorized to make this call.
      operationId: removePermissionFromAllRoles
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemovePermissionFromAllRoles'
        required: true
      responses:
        '200':
          description: Permission removed from roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePerm:
    post:
      tags:
        - role
      description: |-
        Remove a permission from a role using a request body.  A valid role, roleTenant and permission must be specified in the request body.

        Only the role owner or administrators are authorized to make this call.
      operationId: removeRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemoveRolePermission'
        required: true
      responses:
        '200':
          description: Permission removed from role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/replacePathPrefix:
    post:
      tags:
        - role
      description: |-
        Replace the text in a permission specification when its last component defines an *extended path attribute*.  Extended path attributes enhance the standard Shiro matching algorithm with one that treats designated components in a permission specification as a path name, such as a posix file or directory path name.  This request is useful when files or directories have been renamed or moved and their authorizations need to be adjusted.  Consider, for example, permissions that conform to the following specification:

              files:tenantId:op:systemId:path

        By definition, the last component is an extended path attribute whose content can be changed by replacePathPrefix requests.  Specifically, paths that begin with the oldPrefix will have that prefix replaced with the newPrefix value.  Replacement only occurs on permissions that also match the schema and oldSystemId parameter values.  The systemId attribute is required to immediately precede the path attribute, which must be the last attribute.

        Additionally, the oldSystemId is replaced with the newSystemId when a match is found.  If a roleName is provided, then replacement is limited to permissions defined only in that role.  Otherwise, permissions in all roles that meet the other matching criteria will be considered.

        The optional parameters are roleName, oldPrefix and newPrefix. No wildcards are defined for the path prefix parameters.  When roleName is specified then only permissions assigned to that role are considered.

        When the oldPrefix parameter is provided, it's used to filter out permissions whose paths do not begin with the specified string; when not provided, no path prefix filtering occurs.

        When the newPrefix parameter is not provided no new characters are prepended to the new path, effectively just removing the oldPrefix from the new path. When neither oldPrefix nor newPrefix are provided, no path transformation occurs, though system IDs can still be transformed.

        The previewPathPrefix request provides a way to do a dry run using the same input as this request. The preview call calculates the permissions that would change and what their new values would be, but it does not actually change those permissions as replacePathPrefix does.

        The input parameters are passed in the payload of this request.  The response indicates the number of changed permission specifications.

        The path prefix replacement operation is authorized if the user@tenant in the JWT represents a tenant administrator or the Files service.
      operationId: replacePathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqReplacePathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes replaced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateDesc/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's decription using a request body.  The size limit on a description is 2048 characters.

        This request is authorized if the requestor is the role owner or an administrator.
      operationId: updateRoleDescription
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleDescription'
        required: true
      responses:
        '200':
          description: Role description updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateName/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's name using a request body.  Role names are case sensitive, alphanumeric strings that can contain underscores but must begin with an alphabetic character.  The limit on role name is 58 characters.

        This request is authorized if the requestor is the role owner or an administrator.
      operationId: updateRoleName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleName'
        required: true
      responses:
        '200':
          description: Role name updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateOwner/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's owner using a request body. Required parameters in the payload are the *roleTenant*, which is the tenant of named role, and *newOwner*, which is the user to which role ownership is being transferred. The *newTenant* payload parameter is optional and only needed when the new owner resides in a different tenant than that of the current owner.

        This request is authorized if the requestor is the role owner or an administrator. If a new tenant is specified, then the requestor must also be allowed to act in the new tenant.
      operationId: updateRoleOwner
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleOwner'
        required: true
      responses:
        '200':
          description: Role owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/healthcheck:
    get:
      tags:
        - general
      description: Lightwieght health check for liveness. No authorization required.
      operationId: checkHealth
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /security/ready:
    get:
      tags:
        - general
      description: Lightwieght readiness check. No authorization required.
      operationId: ready
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
      deprecated: true
  /security/readycheck:
    get:
      tags:
        - general
      description: Lightwieght readiness check. No authorization required.
      operationId: readycheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /security/hello:
    get:
      tags:
        - general
      description: Logged connectivity test. No authorization required.
      operationId: sayHello
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
      deprecated: true
  /security/share:
    get:
      tags:
        - share
      description: |-
        Get a filtered list of shared resources. Query parameters are used to restrict the returned shares. The *grantor*, *grantee*, *tenant*, *resourceType*, *resourceId1*, *resourceId2*, *privilege*, *createdBy* and *createdByTenant* parameters are used to match values in shared resource objects. Other query parameters are used to control how matching is performed.  The *tenant* parameter is required.

        If resourceId1 or resourceId2 end with a percent sign (%) wildcard then the search results will include all shares with IDs that begin with the same prefix string.  Percent signs embedded elsewhere in the string are *not* recognized as wildcards.

        Specifying the *id* parameter causes the other filtering parameters to be ignored. The result list will contain at most one entry.

        The *includePublicGrantees* flag, true by default, controls whether resources granted to **~public** and **~public_no_authn** are also considered for inclusion in the result list.

        The *requireNullId2* flag, true by default, applies only when no *resourceId2* value is provided. When set, only shared resources that do not specify a *resourceId2* value are considered for inclusion in the result list. By setting this flag to false the caller indicates a "don't care" designation on the *resourceId2* value, allowing shares with any *resourceId2* value to be considered for inclusion in the result list.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: getShares
      parameters:
        - name: grantor
          in: query
          schema:
            type: string
            default: ''
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: createdBy
          in: query
          schema:
            type: string
            default: ''
        - name: createdByTenant
          in: query
          schema:
            type: string
            default: ''
        - name: includePublicGrantees
          in: query
          schema:
            type: boolean
            default: true
        - name: requireNullId2
          in: query
          schema:
            type: boolean
            default: true
        - name: id
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of shares returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - share
      description: |-
        Share a Tapis resource using a request body.  Shared resources allow services to indicate that other services should relax their Tapis authorization checking in certain, well-defined contexts.

        Grantees can be given shared access to a resource on an individual basis or by using the public granting mechanism. Grants to the distinguished **~public** and **~public_no_authn** pseudo-grantees allow access to a resource to authenticated users or to any user, respectively.

        The payload for this request includes these values, with all except *resourceId2* required:

           - grantor
           - grantee
           - tenant
           - resourceType
           - resourceId1
           - resourceId2
           - privilege

        If the share already exists, then this call has no effect. For the request to be authorized, the requestor must be a Tapis service.
      operationId: shareResource
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareResource'
        required: true
      responses:
        '200':
          description: Share existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '201':
          description: Share created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - share
      description: |-
        Delete a single shared resource by unique attribute selection. The *grantor*, *grantee*, *tenant*, *resourceType*, *resourceId1* and *privilege* parameters are mandatory; *resourceId2* is optional and assumed to be NULL if not provided.

        The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter. The calling service must also be the same as the orginal service that granted the share.

        This call is idempotent.  If no share satisfies the above constraints, a success response code is returned and the indicated number of changes is set to zero.  When a share is deleted, the indicated number of changes is one.

        For the request to be authorized, the requestor must be the Tapis service that originally granted the share.
      operationId: deleteShare
      parameters:
        - name: grantor
          in: query
          schema:
            type: string
            default: ''
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share deleted if it exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/share/{id}:
    get:
      tags:
        - share
      description: |-
        Get a shared resource by ID. The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: getShare
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShare'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - share
      description: |-
        Delete a shared resource by ID. The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter. The calling service must also be the same as the orginal service that created the share.

        This call is idempotent.  If no share satisfies the above constraints, a success response code is returned and the indicated number of changes is set to zero.  When a share is deleted, the indicated number of changes is one.

        For the request to be authorized, the requestor must be the Tapis service that originally granted the share.
      operationId: deleteShareById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share deleted if it exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/share/hasPrivilege:
    get:
      tags:
        - share
      description: |-
        Determine if a user has been granted a specific privilege on a specific resource. The *grantee*, *tenant*, *resourceType*, *resourceId1* and *privilege* parameters are mandatory; *resourceId2* is optional and assumed to be NULL if not provided. Privilege matching is performed for the grantee and tenant specified in the query parameters.

        True is returned if the user has been granted the privilege, false otherwise.

        By default, both authenticated and unauthenticated public privileges are included in the calculation. For example, if a privilege on a resource has been granted to all authenticated users in a tenant (~public), then true will be returned for all users in the tenant.

        The *excludePublic* and *excludePublicNoAuthn* parameters can be used to change the default handling of public grants. Either or both types of public grants can be excluded.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: hasPrivilege
      parameters:
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: excludePublic
          in: query
          schema:
            type: boolean
            default: false
        - name: excludePublicNoAuthn
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/admins/{tenant}:
    get:
      tags:
        - user
      description: |-
        Get all users assigned the tenant administrator role ($!tenant_admin).

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getAdmins
      parameters:
        - name: tenant
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of administrator users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/defaultRole/{user}:
    get:
      tags:
        - user
      description: |-
        Get a user's default role. The default role is implicitly created by the system when needed if it doesn't already exist. No authorization required.

        A user's default role is constructed by prepending '$$' to the user's name.  This implies the maximum length of a user name is 58 since role names are limited to 60 characters.
      operationId: getDefaultUserRole_1
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The user's default role name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user:
    get:
      tags:
        - user
      description: |-
        Get the names of all users in the tenant that have been granted a role or permission.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserNames
      parameters:
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of user names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/perms/{user}:
    get:
      tags:
        - user
      description: |-
        Get the permissions assigned to a user in a tenant, including those assigned transively.  The result list can be optionally filtered by the one or both of the query parameters: implies and impliedBy.

        When implies is set, the filter _implies_ each entry in the result set. When impliedBy is set, each entry in the result set is _implied by_ the filter. Below are some examples.

        Consider a user that is assigned these permissions:

            stream:dev:read:project1
            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        **Using the *implies* Query Parameter**

        When _implies=stream:dev:*:project1_, this endpoint returns:

            stream:dev:read:project1
            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        When _implies=stream:dev:write:project1_, this endpoint returns an empty list.

        **Using the *impliedBy* Query Parameter**

        When _impliedBy=stream:dev:*:project1_, this endpoint returns an empty list.

        When _impliedBy=stream:dev:write:project1_, this endpoint returns:

            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserPerms
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: implies
          in: query
          schema:
            type: string
            default: ''
        - name: impliedBy
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of permissions assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/roles/{user}:
    get:
      tags:
        - user
      description: |-
        Get the roles assigned to a user in the specified tenant, including those assigned transively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserRoles
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of roles names assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/withPermission/{permSpec}:
    get:
      tags:
        - user
      description: |-
        Get all users in a tenant assigned a permission.  The permSpec parameter is a permission specification that uses colons as separators, the asterisk as a wildcard character and commas to define lists.  Here are examples of permission specifications:

            system:mytenant:read:mysystem
            system:mytenant:*:mysystem
            system:mytenant
            files:mytenant:read,write:mysystems
        This method recognizes the percent sign (%) as a string wildcard only in the context of database searching.  If a percent sign (%) appears in the permSpec it is interpreted as a zero or more character wildcard.  For example, the following specification would match the first three of the above example specifications but not the fourth:

            system:mytenant:%

        The wildcard character cannot appear as the first character in the permSpec.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUsersWithPermission
      parameters:
        - name: permSpec
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/withRole/{roleName}:
    get:
      tags:
        - user
      description: |-
        Get all users assigned a role.  The role must exist in the tenant.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUsersWithRole
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantAdminRole:
    post:
      tags:
        - user
      description: Grant a user the tenant administrator role.  A valid tenant and user must be specified in the request body.  The user specified in the JWT must be an administrator in the tenant specified in the request body.
      operationId: grantAdminRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantAdminRole'
        required: true
      responses:
        '200':
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantRole:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified role.  A valid tenant and user must be specified in the request body.

        This request is authorized only if the requestor is the role owner or an administrator.  The user and the role must be in the same tenant.
      operationId: grantRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserRole'
        required: true
      responses:
        '200':
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantRoleWithPerm:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified role containing the specified permission.  This compound request first adds the permission to the role if it is not already a member of the role and then assigns the role to the user.  The change count returned can range from zero to two depending on how many insertions were actually required.

        Only the role owner or an administrator is authorized to make this request.  The user and the role must be in the same tenant.
      operationId: grantRoleWithPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserRoleWithPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantUserPermission:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified permission by assigning that permission to to the user's default role.  If the user's default role does not exist,this request will create that role and grant it to the user before assigning the permission to the role.

        A user's default role name is discoverable by calling either of the user/defaultRole or role/defaultRole endpoints.

        The change count returned can range from zero to three depending on how many insertions and updates were actually required

        The caller must be an administrator or service allowed to perform updates in the user's tenant.
      operationId: grantUserPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRole:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned the specified role, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRole'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRoleAll:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned all of the roles specified in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRoleAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRoleAny:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned any of the roles specified in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRoleAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isAdmin:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned the tenant administrator role, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isAdmin
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsAdmin'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermitted:
    post:
      tags:
        - user
      description: |-
        Check whether specified permission matches a permission assigned to the user, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermitted
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermitted'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermittedAll:
    post:
      tags:
        - user
      description: |-
        Check whether a user's permissions satisfy all of the permission specifications contained in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermittedAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermittedAny:
    post:
      tags:
        - user
      description: |-
        Check whether a user's permissions satisfy any of the permission specifications contained in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermittedAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeAdminRole:
    post:
      tags:
        - user
      description: |-
        Revoke the previously granted tenant administrator role from a user. No action is taken if the user is not currently assigned the role (the request is idempotent).  The request will not be honored if revoking the role would leave the tenant with no administrator.

        The user specified in the JWT must themselves be an administrator and a valid tenant and user must be specified in the request body.
      operationId: revokeAdminRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeAdminRole'
        required: true
      responses:
        '200':
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeUserPermission:
    post:
      tags:
        - user
      description: |-
        Revoke the specified permission from the user's default role. A user's default role is constructed by prepending '$$' to the user's name. Default roles are created on demand. If the role does not exist when this method is called no error is reported and no changes occur.

        The change count returned can be zero or one depending on how many permissions were revoked.

        A valid tenant and user must be specified in the request body.  The caller must be an administrator, a service or the user themselves.
      operationId: revokeUserPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeUserPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeUserRole:
    post:
      tags:
        - user
      description: |-
        Revoke a previously granted role from a user. No action is taken if the user is not currently assigned the role. This request is idempotent.

        This request is authorized only if the requestor is the role owner or an administrator.
      operationId: revokeUserRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeUserRole'
        required: true
      responses:
        '200':
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/delete/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Soft delete one or more versions of a secret. Each version can be deleted individually or as part of a group specified in the input array. Deletion can be reversed using the *secret/undelete/{secretName}* endpoint, which make this a _soft_ deletion operation.

        The input versions array is interpreted as follows:

           * [-] - empty = delete all versions
           * [0] - zero = delete only the latest version
           * [1, 3, ...] - list = delete the specified versions

        A valid tenant and user must also be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: deleteSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Secret not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/destroy/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Destroy one or more versions of a secret. Destroy implements a hard delete which delete that cannot be undone. It does not, however, remove any metadata associated with the secret.

        The input versions array is interpreted as follows:

           * [-] - empty = destroy all versions
           * [0] - zero = destroy only the latest version
           * [1, 3, ...] - list = destroy the specified versions

        A valid tenant and user must be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: destroySecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/destroy/meta/{secretType}/{secretName}:
    delete:
      tags:
        - vault
      description: |-
        Erase all traces of a secret: its key, all versions of its value and all its metadata. Specifying a folder erases all secrets in that folder.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: destroySecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret completely removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/list/meta/{secretType}:
    get:
      tags:
        - vault
      description: |-
        List the secret names at the specified path. The path must represent a folder, not an actual secret name. If the path does not have a trailing slash one will be inserted. Secret names should not encode private information.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the secret name.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* path parameter and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: listSecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secrets listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/{secretType}/{secretName}:
    get:
      tags:
        - vault
      description: |-
        Read a versioned secret. By default, the latest version of the secret is read. If the *version* query parameter is specified then that version of the secret is read.  The *version* parameter should be passed as an integer with zero indicating the latest version of the secret. A NOT FOUND status code is returned if the secret version does not exist or if it's deleted or destroyed.

        The response object includes the map of zero or more key/value pairs and metadata that describes the secret. The metadata includes which version of the secret was returned.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: readSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecret'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - vault
      description: |-
        Create or update a secret. The JSON payload contains a required *data* object and an optional *options* object.  It also contains the required tenant and user fields.

        The *data* object is a JSON object that contains one or more key/value pairs in which both the key and value are strings. These are the individual secrets that are saved under the path name. The secrets are automatically versioned, which allows a pre-configured number of past secret values to be accessible even after new values are assigned. See the various GET operations for details on how to access different aspects of secrets.

        NOTE: The *cas* option is currently ignored but documented here for future reference.

        The *options* object can contain a *cas* key and with an integer value that represents a secret version.  CAS stands for check-and-set and will check an existing secret's version before updating.  If cas is not set the write will be always be allowed. If set to 0, a write will only be allowed if the key doesn’t exist. If the index is greater than zero, then the write will only be allowed if the key’s current version matches the version specified in the cas parameter.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service

        ### Generating Secrets
        Passwords and public/private key pairs appropriate for Tapis use can be generated as part of this secret write call.  To direct SK to create a secret, assign the special value `<generate-secret>` to a key.  When SK detects this value, it generates a password or key pair depending on context, and replaces the `<generate-secret>` text with the generated secret.  In the case of a key pair, both the public and private keys are saved.

        Key pairs are always generated for secrets of type JWTSigning, while passwords are generated for all other secret types unless the key is named *privateKey*.

        To generate a key pair, insert the following key/value pair into the payload's data map:

            key="privateKey", value="<generate-secret>"

        When the key pair is generated, the above key/value item is replaced by these two key/value pairs:

            key="privateKey", value=<private key in pem format>
            key="publicKey",  value=<public key in pem format>

        In non-JWTSigning secret types, passwords are generated whenever the following key/value pair is encountered in the payload's data map:

            key=<name other than privateKey>, value="<generate-secret>"

        The generated password simply replaces the item's value and the key name is left unchanged.
      operationId: writeSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqWriteSecret'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretMeta'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/read/meta/{secretType}/{secretName}:
    get:
      tags:
        - vault
      description: |-
        List a secret's metadata including its version information. The input parameter must be a secret name, not a folder. The result includes which version of the secret is the latest.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: readSecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretVersionMetadata'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/undelete/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Restore one or more versions of a secret that have previously been deleted. This endpoint undoes soft deletions performed using the *secret/delete/{secretType}/{secretName}* endpoint.

        The input versions array is interpreted as follows:

           * [-] - empty = undelete all versions
           * [0] - zero = undelete only the latest version
           * [1, 3, ...] - list = undelete the specified versions

        A valid tenant and user must be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: undeleteSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/validateServicePassword/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Validate a service's password. The JSON payload contains the password that needs to be validated against the password stored in the vault for the service specifiedin the X-Tapis-User header. The secret name is the path under whichthe password was stored.

        A valid tenant and user must also be specified in the payload.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        Only services can make this request.
      operationId: validateServicePassword
      parameters:
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqValidateServicePwd'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
components:
  schemas:
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    ResultMetadata:
      type: object
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: object
    RespName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultName'
    ResultName:
      type: object
      properties:
        name:
          type: string
    ReqAddChildRole:
      type: object
      properties:
        roleTenant:
          type: string
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqAddRolePermission:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    ReqCreateRole:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        description:
          type: string
    RespRole:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkRole'
    SkRole:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        ownerTenant:
          type: string
        created:
          type: string
        createdby:
          type: string
        createdbyTenant:
          type: string
        updated:
          type: string
        updatedby:
          type: string
        updatedbyTenant:
          type: string
        hasChildren:
          type: boolean
          writeOnly: true
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespPathPrefixes:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
    Transformation:
      type: object
      properties:
        permId:
          type: integer
          format: int32
        oldPerm:
          type: string
        newPerm:
          type: string
    ReqPreviewPathPrefix:
      type: object
      properties:
        tenant:
          type: string
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    ReqRemoveChildRole:
      type: object
      properties:
        roleTenant:
          type: string
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqRemovePermissionFromAllRoles:
      type: object
      properties:
        tenant:
          type: string
        permSpec:
          type: string
    ReqRemoveRolePermission:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqReplacePathPrefix:
      type: object
      properties:
        tenant:
          type: string
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    ReqUpdateRoleDescription:
      type: object
      properties:
        roleTenant:
          type: string
        newDescription:
          type: string
    ReqUpdateRoleName:
      type: object
      properties:
        roleTenant:
          type: string
        newRoleName:
          type: string
    ReqUpdateRoleOwner:
      type: object
      properties:
        roleTenant:
          type: string
        newOwner:
          type: string
        newTenant:
          type: string
    RespProbe:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkProbe'
    SkProbe:
      type: object
      properties:
        checkNum:
          type: integer
          format: int64
    RespShare:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkShare'
    SkShare:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        grantor:
          type: string
        grantee:
          type: string
        resourceType:
          type: string
        resourceId1:
          type: string
        resourceId2:
          type: string
        privilege:
          type: string
        created:
          type: string
          format: date-time
        createdBy:
          type: string
        createdByTenant:
          type: string
    RespShareList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkShareList'
    SkShareList:
      type: object
      properties:
        shares:
          type: array
          items:
            $ref: '#/components/schemas/SkShare'
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultBoolean'
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    ReqShareResource:
      type: object
      properties:
        grantor:
          type: string
        grantee:
          type: string
        tenant:
          type: string
        resourceType:
          type: string
        resourceId1:
          type: string
        resourceId2:
          type: string
        privilege:
          type: string
    ReqGrantAdminRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqGrantUserRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRoleWithPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqGrantUserPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
    RespAuthorized:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultAuthorized'
    ResultAuthorized:
      type: object
      properties:
        isAuthorized:
          type: boolean
    ReqUserHasRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
        orAdmin:
          type: boolean
    ReqUserHasRoleMulti:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleNames:
          type: array
          items:
            type: string
        orAdmin:
          type: boolean
    ReqUserIsAdmin:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqUserIsPermitted:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
        orAdmin:
          type: boolean
    ReqUserIsPermittedMulti:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpecs:
          type: array
          items:
            type: string
        orAdmin:
          type: boolean
    ReqRevokeAdminRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqRevokeUserPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
    ReqRevokeUserRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
    RespVersions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            type: integer
            format: int32
    ReqVersions:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        versions:
          type: array
          items:
            type: integer
            format: int32
    RespSecretList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretList'
    SkSecretList:
      type: object
      properties:
        secretPath:
          type: string
        keys:
          type: array
          items:
            type: string
    RespSecret:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecret'
    SkSecret:
      type: object
      properties:
        secretMap:
          type: object
          additionalProperties:
            type: string
        metadata:
          $ref: '#/components/schemas/SkSecretMetadata'
    SkSecretMetadata:
      type: object
      properties:
        created_time:
          type: string
        deletion_time:
          type: string
        destroyed:
          type: boolean
        version:
          type: integer
          format: int32
    RespSecretVersionMetadata:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretVersionMetadata'
    SkSecretVersion:
      type: object
      properties:
        version:
          type: integer
          format: int32
        created_time:
          type: string
        deletion_time:
          type: string
        destroyed:
          type: boolean
    SkSecretVersionMetadata:
      type: object
      properties:
        created_time:
          type: string
        current_version:
          type: integer
          format: int32
        max_versions:
          type: integer
          format: int32
        oldest_version:
          type: integer
          format: int32
        updated_time:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SkSecretVersion'
    ReqValidateServicePwd:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        password:
          type: string
    RespSecretMeta:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretMetadata'
    Options:
      type: object
      properties:
        cas:
          type: integer
          format: int32
    ReqWriteSecret:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        options:
          $ref: '#/components/schemas/Options'
        data:
          type: object
          additionalProperties:
            type: string
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
